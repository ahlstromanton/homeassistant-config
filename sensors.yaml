########## SENSORS #########

### Visa tid och datum ###
- platform: time_date
  display_options:
    - "time"
    - "date"
    - "date_time"
    - "date_time_utc"
    - "time_date"

  ### Övervakning av Raspberry Pi ###
- platform: systemmonitor
  resources:
    - type: disk_use_percent
      arg: /config
    - type: memory_use_percent
    - type: processor_use
    - type: processor_temperature


  ### Översätt veckodagar till svenska ###
- platform: template
  sensors:
    current_weekday_translation:
      friendly_name: "Current Weekday Translation"
      value_template: >
        {% set current_weekday = now().strftime('%A') %}
        {% if current_weekday == "Monday" %}
          Måndag
        {% elif current_weekday == "Tuesday" %}
          Tisdag
        {% elif current_weekday == "Wednesday" %}
          Onsdag
        {% elif current_weekday == "Thursday" %}
          Torsdag
        {% elif current_weekday == "Friday" %}
          Fredag
        {% elif current_weekday == "Saturday" %}
          Lördag
        {% elif current_weekday == "Sunday" %}
          Söndag
        {% endif %}

- platform: sjofartsverket_viva
  name: Vind
  region: 164
  scan_interval: 30
- platform: template
  sensors:
    vind2:
      friendly_name: "Byvind"
      entity_id: sensor.vind
      unit_of_measurement: "m/s"
      value_template: "{{ state_attr('sensor.vind', 'Wind max') }}"

- platform: template
  sensors:
    utetemperatur:
      friendly_name: "Utetemp"
      entity_id: weather.forecast_hertig_eriks_vag_21c
      unit_of_measurement: "°C"
      value_template: "{{ state_attr('weather.forecast_hertig_eriks_vag_21c', 'temperature') }}"

- platform: template
  sensors:
    water_liters_consumed:
      friendly_name: "Water Liters Consumed"
      entity_id: sensor.water_meter_total
      unit_of_measurement: "L"
      value_template: "{{ ( states('sensor.water_meter_total_2') | float * 1000 ) | round(3) }}"

- platform: template
  sensors:
    total_water_cost:
      friendly_name: "Total Water Cost"
      unit_of_measurement: "SEK"
      value_template: >
        {% set usage = states('sensor.water_meter_total_2') | float %}
        {% set fixed_tariff = 26.25 %}
        {% set cost = usage * fixed_tariff %}
        {{ cost | round(2) }}

- platform: template
  sensors:
    weekly_water_cost:
      friendly_name: "Weekly Water Cost"
      unit_of_measurement: "SEK"
      value_template: >
        {% set usage = states('sensor.water_used_weekly') | float %}
        {% set fixed_tariff = 0.02625 %}
        {% set cost = usage * fixed_tariff %}
        {{ cost | round(2) }}

- platform: template
  sensors:
    weekly_energy_cost:
      friendly_name: "Weekly Energy Cost"
      unit_of_measurement: "SEK"
      value_template: >
        {% set usage = states('sensor.weekly_energy_use') | float %}
        {% set fixed_tariff = 0.68 %}
        {% set cost = usage * fixed_tariff %}
        {{ cost | round(2) }}

- platform: template
  sensors:
    energy_usage_kwh:
      friendly_name: "Frient in kWh"
      device_class: energy
      entity_id: sensor.develco_zhemi101_summation_delivered
      unit_of_measurement: "kWh"
      value_template: "{{ ( states('sensor.develco_zhemi101_summation_delivered') ) }}"

- platform: integration
  source: sensor.develco_zhemi101_summation_delivered
  name: energy_spent
  unit_prefix: k
  round: 2

  ### Pollenprognos Gräs
- platform: template
  sensors:
    pollenhalt_grass:
      friendly_name: "Pollenhalt Gräs"
      value_template: >
        {% set pollen_value = states('sensor.pollen_goteborg_gras') | float %}
        {% if pollen_value == 0 %}
          Inget
        {% elif pollen_value == 1 %}
          Lite
        {% elif pollen_value == 2 %}
          Ganska lite
        {% elif pollen_value == 3 %}
          En del
        {% elif pollen_value == 4 %}
          Ganska mycket
        {% elif pollen_value == 5 %}
          Mycket
        {% elif pollen_value == 6 %}
          Väldigt mycket
        {% elif pollen_value == 7 %}
          Extremt mycket
        {% endif %}

  ### Pollenprognos Björk
- platform: template
  sensors:
    pollenhalt_bjork:
      friendly_name: "Pollenhalt Björk"
      value_template: >
        {% set pollen_value = states('sensor.pollen_goteborg_bjork') | float %}
        {% if pollen_value == 0 %}
          Inget
        {% elif pollen_value == 1 %}
          Lite
        {% elif pollen_value == 2 %}
          Ganska lite
        {% elif pollen_value == 3 %}
          En del
        {% elif pollen_value == 4 %}
          Ganska mycket
        {% elif pollen_value == 5 %}
          Mycket
        {% elif pollen_value == 6 %}
          Väldigt mycket
        {% elif pollen_value == 7 %}
          Extremt mycket
        {% endif %}

- platform: rest
  resource: https://services.viva.sjofartsverket.se:8080/output/vivaoutputservice.svc/vivastation/89
  name: "VIVA Vattenstånd och Vattentemp"
  value_template: "{{ value_json.GetSingleStationResult.Samples[1].Value }}"
  unit_of_measurement: "°C"
  scan_interval: 300 # Adjust the interval as needed
  json_attributes:
    - GetSingleStationResult

- platform: template
  sensors:
    total_lights_on:
      value_template: >
        {{ states.light | rejectattr('attributes.entity_id', 'defined') | selectattr('state', 'eq', 'on') | list | count }}

- platform: template
  sensors:
    vardagsrum_lights_on_count:
      value_template: >
        {{ states.light.vardagsrum | rejectattr('attributes.entity_id', 'defined') | selectattr('state', 'eq', 'on') | list | count }}

- platform: template
  sensors:
    num_in_master_bed:
      friendly_name: "Number of People in Bed"
      unit_of_measurement: "people"
      value_template: >-
        {% if is_state('binary_sensor.person_1_in_bed', 'on') and is_state('binary_sensor.person_2_in_bed', 'on') %}
            2
        {% elif is_state('binary_sensor.person_1_in_bed', 'on') or is_state('binary_sensor.person_2_in_bed', 'on') %}
            1
        {% else %}
            0
        {% endif %}

# For use in Utility Meters to track set and moving energy rates * usage
- platform: template
  sensors:
    total_energy_cost_set_rate:
      friendly_name: "Total Energy Cost Set Rate"
      unit_of_measurement: "SEK"
      value_template: >
        {% set usage = states('sensor.frient_utility_meter_test') | float %}
        {% set fixed_tariff = 0.68 %}
        {% set cost = usage * fixed_tariff %}
        {{ cost | round(2) }}

- platform: template
  sensors:
    total_energy_cost_moving_rate:
      friendly_name: "Total Energy Cost Moving Rate"
      unit_of_measurement: "SEK"
      value_template: >
        {% set usage = states('sensor.frient_utility_meter_test') | float %}
        {% set set_tariff = states('sensor.nordpool_kwh_se3_sek_3_10_025') | float %}
        {% set cost = usage * set_tariff %}
        {{ cost | round(2) }}

# Comparison between rates. Positive value indicate earnings, negative indicate loss
- platform: template
  sensors:
    energy_rates_hourly_comparison:
      friendly_name: "Energy Rates Hourly Earnings Comparison"
      unit_of_measurement: "SEK"
      value_template: >
        {% set moving = states('sensor.hourly_moving_rate_cost') | float %}
        {% set steady = states('sensor.hourly_set_rate_cost') | float %}
        {% set comp = moving - steady %}
        {{ comp | round(2) }}
    energy_rates_daily_comparison:
      friendly_name: "Energy Rates Daily Earnings Comparison"
      unit_of_measurement: "SEK"
      value_template: >
        {% set moving = states('sensor.daily_moving_rate_cost') | float %}
        {% set steady = states('sensor.daily_set_rate_cost') | float %}
        {% set comp = moving - steady %}
        {{ comp | round(2) }}
    energy_rates_weekly_comparison:
      friendly_name: "Energy Rates Weekly Earnings Comparison"
      unit_of_measurement: "SEK"
      value_template: >
        {% set moving = states('sensor.weekly_moving_rate_cost') | float %}
        {% set steady = states('sensor.weekly_set_rate_cost') | float %}
        {% set comp = moving - steady %}
        {{ comp | round(2) }}
    energy_rates_monthly_comparison:
      friendly_name: "Energy Rates Monthly Earnings Comparison"
      unit_of_measurement: "SEK"
      value_template: >
        {% set moving = states('sensor.monthly_moving_rate_cost') | float %}
        {% set steady = states('sensor.monthly_set_rate_cost') | float %}
        {% set comp = moving - steady %}
        {{ comp | round(2) }}
    energy_rates_yearly_comparison:
      friendly_name: "Energy Rates Yearly Earnings Comparison"
      unit_of_measurement: "SEK"
      value_template: >
        {% set moving = states('sensor.yearly_moving_rate_cost') | float %}
        {% set steady = states('sensor.yearly_set_rate_cost') | float %}
        {% set comp = moving - steady %}
        {{ comp | round(2) }}

- platform: template
  sensors:
    total_energy_cost_set_rate:
      friendly_name: "Total Energy Cost Set Rate"
      unit_of_measurement: "SEK"
      value_template: >
        {% set usage = states('sensor.sensor.water_meter_total_2') | float %}
        {% set price_per_m3 = 26,25 %}
        {% set cost = (usage * price_per_m3) / 1000 %}
        {{ cost | round(2) }}
